{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,SAAS,MAAM,wBAAwB,CAAC;AA+BpD,MAAM,eAAe,GAA8B;IACjD,iBAAiB,EAAE,IAAI;CACxB,CAAC;AAEF,MAAM,OAAO,OAAO;IAClB,QAAQ,CAAkB;IAE1B,YAAY,OAA4B;QACtC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CACpD,OAAO,CAAC,GAAG,CACT,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CACd,IAAI,IAAI,CACN,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,EAC1C,WAAW,KAAK,MAAM,CACvB,CACJ,CACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,UAA4B;QAE5B,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,UAAU,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACnD,IAAI,CAAC,QAAQ;YACb,UAAU,CAAC,GAAG;YACd,UAAU,CAAC,UAAU;SACtB,CAAC,CAAC;QAEH,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,SAAS,CAAC,WAAW,CAAC;YACzC,QAAQ,EAAE;gBACR,OAAO;gBACP,MAAM,EAAE;oBACN,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;oBACjE,IAAI,IAAI,CACN,CAAC,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,EAC1D,UAAU,eAAe,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CACpD;iBACF;aACF;SACF,CAAC,CAAC;QAEH,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,MAAM;QAClC,kBAAkB,CAAC,8BAA8B,EAAE,KAAK,CACzD,CAAC;QAEF,OAAO,IAAI,cAAc,CACvB,WAAiD,CAClD,CAAC;IACJ,CAAC;CACF;AAED,MAAM,OAAO,cAAc;IACzB,YAAY,CAAqC;IAEjD,YAAY,WAAgB;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,WAA0B;QAC1C,MAAM,eAAe,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CACxC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE,EAAE;YAC1D,IAAI,OAAO,UAAU,IAAI,QAAQ,EAAE,CAAC;gBAClC,UAAU,GAAG,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAoB,CAAC;YACxE,CAAC;YAED,OAAO,CAAC,GAAG,EAAE,MAAM,UAAU,CAAC,CAAC;QACjC,CAAC,CAAC,CACH,CAAuB,CAAC;QAEzB,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE;YAC9D,GAAG,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;YACpB,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAe,CAAC,CAAC;QAEpB,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;CACF","sourcesContent":["import * as apiClient from '@commontools/usuba-api';\n\nexport type SourceCode = string | Uint8Array;\nexport type PendingSourceCode = SourceCode | Promise<SourceCode>;\n\nexport type ContentType = 'text/javascript';\n\nexport type ContentTypeFileExtensions = {\n  [C in ContentType]: string;\n};\n\nexport interface ModuleDefinition {\n  contentType: ContentType;\n  wit: PendingSourceCode;\n  sourceCode: PendingSourceCode;\n}\n\nexport type Import = {\n  [index: string]: any;\n};\n\nexport type ImportMap = {\n  [index: string]: Import;\n};\n\nexport type Importable = string | Import | Promise<Import>;\n\nexport type ImportableMap = {\n  [index: string]: Importable;\n};\n\nconst FILE_EXTENSIONS: ContentTypeFileExtensions = {\n  'text/javascript': 'js',\n};\n\nexport class Runtime {\n  #library: Promise<File[]>;\n\n  constructor(library: PendingSourceCode[]) {\n    this.#library = Promise.all(library).then((library) =>\n      library.map(\n        (item, index) =>\n          new File(\n            [new Blob([item], { type: 'text/plain' })],\n            `library-${index}.wit`\n          )\n      )\n    );\n  }\n\n  async defineModule<T>(\n    definition: ModuleDefinition\n  ): Promise<PreparedModule<T>> {\n    const [library, wit, sourceCode] = await Promise.all([\n      this.#library,\n      definition.wit,\n      definition.sourceCode,\n    ]);\n\n    const { id } = await apiClient.buildModule({\n      formData: {\n        library,\n        module: [\n          new File([new Blob([wit], { type: 'text/plain' })], 'module.wit'),\n          new File(\n            [new Blob([sourceCode], { type: definition.contentType })],\n            `module.${FILE_EXTENSIONS[definition.contentType]}`\n          ),\n        ],\n      },\n    });\n\n    const { instantiate } = await import(\n      /* @vite-ignore */ `/module/transpiled/runtime/${id}.js`\n    );\n\n    return new PreparedModule(\n      instantiate as (imports: ImportMap) => Promise<T>\n    );\n  }\n}\n\nexport class PreparedModule<T> {\n  #instantiate: (imports: ImportMap) => Promise<T>;\n\n  constructor(instantiate: any) {\n    this.#instantiate = instantiate;\n  }\n\n  async instantiate(importables: ImportableMap): Promise<T> {\n    const importedEntries = (await Promise.all(\n      Object.entries(importables).map(async ([key, importable]) => {\n        if (typeof importable == 'string') {\n          importable = import(/* @vite-ignore */ importable) as Promise<Import>;\n        }\n\n        return [key, await importable];\n      })\n    )) as [string, Import][];\n\n    const imports = importedEntries.reduce((map, [key, imported]) => {\n      map[key] = imported;\n      return map;\n    }, {} as ImportMap);\n\n    return await this.#instantiate(imports);\n  }\n}\n"]}