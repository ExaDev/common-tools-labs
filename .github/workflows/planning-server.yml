name: Deploy @commontools/planning-server

on:
  push:
    # branches:
    #   - main
  workflow_dispatch:
    inputs:
      push:
        description: "Push docker image"
        required: false
        default: "false"

env:
  NODE_VERSION: 20
  PUSH: ${{ github.event.inputs.push || 'false' }}
  WORKING_DIRECTORY: typescript/packages/planning-server
  REGISTRY: ghcr.io

defaults:
  run:
    working-directory: typescript/packages/planning-server

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

  # git rev-parse --short ${{ github.sha }}
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: short_hash
        run: echo "short_hash=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
      - name: Get Git commit timestamps
        id: timestamp
        run: echo "timestamp=$(git log -1 --pretty=%ct)" >> $GITHUB_OUTPUT
      - name: Compute lower case owner name
        id: owner_lower
        env:
          REPO_OWNER: ${{ github.repository_owner }}
        run: echo "owner_lower=${REPO_OWNER@L}" >> $GITHUB_OUTPUT
      - name: Compute repository name
        id: repo_name
        run: echo "image_name=$(echo "${{ github.repository }}" | cut -d'/' -f2)" >> $GITHUB_OUTPUT
      - name: Compute image name
        id: image_name
        run: echo "image_name=${{ steps.owner_lower.outputs.owner_lower }}/${{ steps.repo_name.outputs.image_name }}-planning-server" >> $GITHUB_OUTPUT
    outputs:
      short_hash: ${{ steps.short_hash.outputs.short_hash }}
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
      owner_lower: ${{ steps.owner_lower.outputs.owner_lower }}
      repo_name: ${{ steps.repo_name.outputs.repo_name }}
      image_name: ${{ steps.image_name.outputs.image_name }}

  deno_test:
    name: Test under Deno
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*.ts') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v1

      - run: deno run test

  node_test:
    name: Test under Node.js
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*.ts') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - run: npm install

      - run: npm test

  deno_build:
    env:
      DESTINATION: dist/bin/planning-server
    name: Build with Deno
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*.ts') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - name: Set up Deno
        uses: denoland/setup-deno@v1

      - name: Compile Deno entrypoint
        run: |
          deno compile \
          --output $DESTINATION \
          --allow-net \
          --allow-env \
          --allow-read \
          src/index.ts

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: planning-server
          path: ${{ env.DESTINATION }}

  check:
    name: Check code quality
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x # Run with latest stable Deno.

      # Check if the code is formatted according to Deno's default
      # formatting conventions.
      - run: deno fmt --check
        name: Check formatting

      # Scan the code for syntax errors and style issues. If
      # you want to use a custom linter configuration you can add a configuration file with --config <myconfig>
      - run: deno lint
        name: Lint code

      # Run all test files in the repository and collect code coverage. The example
      # runs with all permissions, but it is recommended to run with the minimal permissions your program needs (for example --allow-read).
      - run: deno test --allow-all --coverage=cov/
        name: Run tests and collect coverage

      # This generates a report from the collected coverage in `deno test --coverage`. It is
      # stored as a .lcov file which integrates well with services such as Codecov, Coveralls and Travis CI.
      - run: deno coverage --lcov cov/ > cov.lcov
        name: Generate coverage report

      # Upload the coverage report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: cov.lcov

  node_build:
    name: Build with Node.js
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm install

      - run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: planning-server

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    needs:
      - setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3 # https://github.com/docker/setup-qemu-action

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # https://github.com/docker/setup-buildx-action

      - name: Install cosign
        uses: sigstore/cosign-installer@v3 # https://github.com/sigstore/cosign-installer

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and export test image
        id: build_test
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: false
          tags: ${{ env.REGISTRY }}/${{ needs.setup.outputs.image_name }}:test
          load: true

      - name: Validate test image
        env:
          PORT: 8000
        run: |
          # Start the container in detached mode
          docker run -d --rm -p $PORT:$PORT ${{ env.REGISTRY }}/${{ needs.setup.outputs.image_name }}:test

          # Wait for the server to start (adjust the port and URL as needed)
          for i in {1..10}; do
            if nc -z localhost $PORT; then
              echo "Server is up"
              break
            fi
            sleep 1
          done

          # verify port is reachable
          if ! nc -z localhost $PORT; then
            echo "Server did not start"
            exit 1
          fi

          # Stop the container
          docker stop $(docker ps -q --filter ancestor=${{ env.REGISTRY }}/${{ needs.setup.outputs.image_name }}:test)
        continue-on-error: true # TODO: remove this when the test image is validated

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5 # https://github.com/docker/metadata-action
        with:
          images: ${{ env.REGISTRY }}/${{ needs.setup.outputs.image_name }}
          tags: |
            type=sha

      - name: Build ${{ env.PUSH == 'true' && 'and push' || '' }} Docker image
        id: build
        uses: docker/build-push-action@v6 # https://github.com/docker/build-push-action
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }} # see https://docs.docker.com/build/ci/github-actions/reproducible-builds
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ env.PUSH }}
          platforms: linux/amd64,linux/arm64
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Sign the published Docker image
        if: ${{ env.PUSH == 'true' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
