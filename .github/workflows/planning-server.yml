name: Deploy @commontools/planning-server

on:
  push:
    # branches:
    #   - main
  workflow_dispatch:
    inputs:
      push:
        description: "Push docker image"
        required: false
        default: "false"

env:
  NODE_VERSION: 20
  PUSH: ${{ github.event.inputs.push || 'false' }}
  WORKING_DIRECTORY: typescript/packages/planning-server
  IMAGE_NAME: planning-server

defaults:
  run:
    working-directory: typescript/packages/planning-server

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

  # git rev-parse --short ${{ github.sha }}
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - id: short_hash
        run: echo "short_hash=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
      - name: Get Git commit timestamps
        id: timestamp
        run: echo "timestamp=$(git log -1 --pretty=%ct)" >> $GITHUB_OUTPUT
      - name: set lower case owner name
        # echo "REPO=${GITHUB_REPOSITORY@L}" >> "${GITHUB_ENV}"
        # ${{ github.repository_owner }}
        # echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
        run: echo "owner_lower=${${{ github.repository_owner }},,}" >> $GITHUB_OUTPUT
        id: owner_lower
    outputs:
      short_hash: ${{ steps.short_hash.outputs.short_hash }}
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
      owner_lower: ${{ steps.owner_lower.outputs.owner_lower }}

  deno_test:
    name: Test under Deno
    runs-on: ubuntu-latest
    steps:
      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*.ts') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v1

      - run: deno run test

  node_test:
    name: Test under Node.js
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*.ts') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - run: npm install

      - run: npm test

  deno_build:
    name: Build with Deno
    # needs:
    # - deno_test
    # - node_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*.ts') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - name: Set up Deno
        uses: denoland/setup-deno@v1

      - run: deno run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: planning-server

  check:
    name: Check code quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x # Run with latest stable Deno.

      # Check if the code is formatted according to Deno's default
      # formatting conventions.
      - run: deno fmt --check
        name: Check formatting

      # Scan the code for syntax errors and style issues. If
      # you want to use a custom linter configuration you can add a configuration file with --config <myconfig>
      - run: deno lint
        name: Lint code

      # Run all test files in the repository and collect code coverage. The example
      # runs with all permissions, but it is recommended to run with the minimal permissions your program needs (for example --allow-read).
      - run: deno test --allow-all --coverage=cov/
        name: Run tests and collect coverage

      # This generates a report from the collected coverage in `deno test --coverage`. It is
      # stored as a .lcov file which integrates well with services such as Codecov, Coveralls and Travis CI.
      - run: deno coverage --lcov cov/ > cov.lcov
        name: Generate coverage report

      # Upload the coverage report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: cov.lcov

  node_build:
    name: Build with Node.js
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm install

      - run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: planning-server

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs:
      - setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }} # see https://docs.docker.com/build/ci/github-actions/reproducible-builds
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: ${{ env.PUSH }}
          cache-from: |
            type=gha,mode=max
          cache-to: |
            type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: mode=max
          tags: |
            ghcr.io/${{ needs.setup.outputs.owner_lower }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.short_hash }}
